from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score

# a. 데이터셋 생성
X, y = make_moons(n_samples=1000, noise=0.4, random_state=42)

# b. 훈련 세트와 테스트 세트로 나누기
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# c. 그리드 탐색을 통한 최적의 매개변수 찾기
param_grid = {
    'max_depth': [3, 4, 5, 6],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

tree_clf = DecisionTreeClassifier(random_state=42)
grid_search = GridSearchCV(tree_clf, param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_

# d. 최적의 매개변수로 모델 훈련 및 성능 측정
best_tree_clf = DecisionTreeClassifier(**best_params, random_state=42)
best_tree_clf.fit(X_train, y_train)
y_pred = best_tree_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print(f'최적 모델의 정확도: {accuracy}')